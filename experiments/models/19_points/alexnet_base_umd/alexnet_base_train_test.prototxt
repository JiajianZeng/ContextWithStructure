name: "alexnet_base_umd_face_224x224_rgb"

# train data
layer {
  name: "lmdb_data"
  type: "Data"
  top: "data"
  include {
    phase: TRAIN
  }
  data_param {
    source: "./experiments/data_processing/dataset/train/umd_face_224x224_rgb_data"
    batch_size: 64
    backend: LMDB
  }
  transform_param {
    mean_file: "./experiments/data_processing/dataset/train/umd_face_224x224_rgb_mean.binaryproto"
  }
}

layer {
  name: "lmdb_landmark"
  type: "Data"
  top: "landmark"
  include {
    phase: TRAIN
  }
  data_param {
    source: "./experiments/data_processing/dataset/train/umd_face_224x224_rgb_landmark"
    batch_size: 64
    backend: LMDB
  }
}

# test data
layer {
  name: "lmdb_data_test"
  type: "Data"
  top: "data"
  include {
    phase: TEST
  }
  data_param {
    source: "./experiments/data_processing/dataset/test/umd_face_224x224_rgb_data"
    batch_size: 64
    backend: LMDB
  }
  transform_param {
    mean_file: "./experiments/data_processing/dataset/train/umd_face_224x224_rgb_mean.binaryproto"
  }
}

layer {
  name: "lmdb_landmark_test"
  type: "Data"
  top: "landmark"
  include {
    phase: TEST
  }
  data_param {
    source: "./experiments/data_processing/dataset/test/umd_face_224x224_rgb_landmark"
    batch_size: 64
    backend: LMDB
  }
}

layer {
  name: "lmdb_eyedist_test"
  type: "Data"
  top: "eyedist"
  include {
    phase: TEST
  }
  data_param {
    source: "./experiments/data_processing/dataset/test/umd_face_224x224_rgb_eyedist"
    batch_size: 64
    backend: LMDB
  }
}

# network architecture
layer {
  name: "lm_conv1"
  type: "Convolution"
  bottom: "data"
  top: "lm_conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lm_relu1"
  type: "ReLU"
  bottom: "lm_conv1"
  top: "lm_conv1"
}
layer {
  name: "lm_norm1"
  type: "LRN"
  bottom: "lm_conv1"
  top: "lm_norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "lm_pool1"
  type: "Pooling"
  bottom: "lm_norm1"
  top: "lm_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "lm_conv2"
  type: "Convolution"
  bottom: "lm_pool1"
  top: "lm_conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "lm_relu2"
  type: "ReLU"
  bottom: "lm_conv2"
  top: "lm_conv2"
}
layer {
  name: "lm_norm2"
  type: "LRN"
  bottom: "lm_conv2"
  top: "lm_norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "lm_pool2"
  type: "Pooling"
  bottom: "lm_norm2"
  top: "lm_pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "lm_conv3"
  type: "Convolution"
  bottom: "lm_pool2"
  top: "lm_conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lm_relu3"
  type: "ReLU"
  bottom: "lm_conv3"
  top: "lm_conv3"
}
layer {
  name: "lm_conv4"
  type: "Convolution"
  bottom: "lm_conv3"
  top: "lm_conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "lm_relu4"
  type: "ReLU"
  bottom: "lm_conv4"
  top: "lm_conv4"
}
layer {
  name: "lm_conv5"
  type: "Convolution"
  bottom: "lm_conv4"
  top: "lm_conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "lm_relu5"
  type: "ReLU"
  bottom: "lm_conv5"
  top: "lm_conv5"
}
layer {
  name: "lm_pool5"
  type: "Pooling"
  bottom: "lm_conv5"
  top: "lm_pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "lm_fc6"
  type: "InnerProduct"
  bottom: "lm_pool5"
  top: "lm_fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "lm_relu6"
  type: "ReLU"
  bottom: "lm_fc6"
  top: "lm_fc6"
}
layer {
  name: "lm_drop6"
  type: "Dropout"
  bottom: "lm_fc6"
  top: "lm_fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "lm_fc7"
  type: "InnerProduct"
  bottom: "lm_fc6"
  top: "lm_fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "lm_relu7"
  type: "ReLU"
  bottom: "lm_fc7"
  top: "lm_fc7"
}
layer {
  name: "lm_drop7"
  type: "Dropout"
  bottom: "lm_fc7"
  top: "lm_fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "lm_fc8"
  type: "InnerProduct"
  bottom: "lm_fc7"
  top: "lm_fc8"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 38
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

layer {
  name: "performance"
  type: "FacialLandmarkPerformance"
  bottom: "lm_fc8"
  bottom: "landmark"
  bottom: "eyedist"
  top: "average_error"
  top: "false_rate"
  
  facial_landmark_performance_param {
    num_landmark: 19
    error_threshold: 0.1
  }
  include {
    phase: TEST
  }
}

layer {
  name: "euclidean_loss"
  type: "EuclideanLoss"
  bottom: "lm_fc8"
  bottom: "landmark"
  top: "euclidean_loss"
  #loss_weight: 10
}


